package com.test;

import com.google.auto.value.AutoValue;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class Type {
  private Type() {
  }

  public static Type.DataType dataType(String name) {
    return new AutoValue_Type_DataType(name);
  }

  public static Type.SecondDataType secondDataType(Integer age) {
    return new AutoValue_Type_SecondDataType(age);
  }

  public final <Return> Return match(Type.Matcher<Return> matcher) {
    if (this instanceof Type.DataType) {
      return matcher.dataType((Type.DataType) this);
    }
    if (this instanceof Type.SecondDataType) {
      return matcher.secondDataType((Type.SecondDataType) this);
    }
    throw new IllegalStateException("Unexpected Type subclass encountered.");
  }

  public <Return> Type.Matching<Return> matching() {
    return new Type.Matching<Return>(this);
  }

  public final void accept(Type.Accepter accepter) {
    if (this instanceof Type.DataType) {
      accepter.dataType((Type.DataType) this);
      return;
    }
    if (this instanceof Type.SecondDataType) {
      accepter.secondDataType((Type.SecondDataType) this);
      return;
    }
    throw new IllegalStateException("Unexpected Type subclass encountered.");
  }

  public Type.Accepting accepting() {
    return new Type.Accepting(this);
  }

  public <Return> Return matching(Function<Type.DataType, Return> dataType,
      Function<Type.SecondDataType, Return> secondDataType) {
    if (this instanceof Type.DataType) {
      return dataType.apply((Type.DataType) this);
    }
    if (this instanceof Type.SecondDataType) {
      return secondDataType.apply((Type.SecondDataType) this);
    }
    throw new IllegalStateException("Unexpected Type subclass encountered.");
  }

  @AutoValue
  public abstract static class DataType extends Type {
    public abstract String name();
  }

  @AutoValue
  public abstract static class SecondDataType extends Type {
    public abstract Integer age();
  }

  public interface Matcher<Return> {
    Return dataType(Type.DataType dataType);

    Return secondDataType(Type.SecondDataType secondDataType);
  }

  public static final class Matching<Return> {
    private Type value;

    private Return returnValue;

    private Matching(final Type value) {
      this.value = value;
    }

    public Type.Matching<Return> DataType(final Function<Type.DataType, Return> fn) {
      if (this.value instanceof Type.DataType) {
        this.returnValue = fn.apply((Type.DataType) this.value);
      }
      return this;
    }

    public Type.Matching<Return> SecondDataType(final Function<Type.SecondDataType, Return> fn) {
      if (this.value instanceof Type.SecondDataType) {
        this.returnValue = fn.apply((Type.SecondDataType) this.value);
      }
      return this;
    }

    public boolean isMatched() {
      return this.returnValue != null;
    }

    public Return get() {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public Optional<Return> find() {
      return Optional.ofNullable(this.returnValue);
    }

    public Return orElse(final Return returnValue) {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        return returnValue;
      }
    }
  }

  public interface Accepter {
    void dataType(Type.DataType dataType);

    void secondDataType(Type.SecondDataType secondDataType);
  }

  public static final class Accepting {
    private boolean done;

    private Type value;

    private Accepting(final Type value) {
      this.value = value;
    }

    public Type.Accepting DataType(final Consumer<Type.DataType> fn) {
      if (this.value instanceof Type.DataType) {
        fn.accept((Type.DataType) this.value);
        this.done = true;
      }
      return this;
    }

    public Type.Accepting SecondDataType(final Consumer<Type.SecondDataType> fn) {
      if (this.value instanceof Type.SecondDataType) {
        fn.accept((Type.SecondDataType) this.value);
        this.done = true;
      }
      return this;
    }

    public boolean wasAccepted() {
      return this.done;
    }

    public void accept() {
      if (!this.done) {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public void orElse(final Consumer<Type> fn) {
      if (!this.done) {
        fn.accept(this.value);
      }
      else {
        throw new IllegalStateException("Value already matched: " + this.value);
      }
    }
  }
}


package com.test;

import com.google.auto.value.AutoValue;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class Request {
  private Request() {
  }

  public static Request.GET GET(String path, String query) {
    return new AutoValue_Request_GET(path, query);
  }

  public static Request.PUT PUT(String path, String body) {
    return new AutoValue_Request_PUT(path, body);
  }

  public static Request.DELETE DELETE(String path) {
    return new AutoValue_Request_DELETE(path);
  }

  public final <Return> Return match(Request.Matcher<Return> matcher) {
    if (this instanceof Request.GET) {
      return matcher.GET((Request.GET) this);
    }
    if (this instanceof Request.PUT) {
      return matcher.PUT((Request.PUT) this);
    }
    if (this instanceof Request.DELETE) {
      return matcher.DELETE((Request.DELETE) this);
    }
    throw new IllegalStateException("Unexpected Request subclass encountered.");
  }

  public <Return> Request.Matching<Return> matching() {
    return new Request.Matching<Return>(this);
  }

  public final void accept(Request.Accepter accepter) {
    if (this instanceof Request.GET) {
      accepter.GET((Request.GET) this);
      return;
    }
    if (this instanceof Request.PUT) {
      accepter.PUT((Request.PUT) this);
      return;
    }
    if (this instanceof Request.DELETE) {
      accepter.DELETE((Request.DELETE) this);
      return;
    }
    throw new IllegalStateException("Unexpected Request subclass encountered.");
  }

  public Request.Accepting accepting() {
    return new Request.Accepting(this);
  }

  public <Return> Return matching(Function<Request.GET, Return> GET,
      Function<Request.PUT, Return> PUT, Function<Request.DELETE, Return> DELETE) {
    if (this instanceof Request.GET) {
      return GET.apply((Request.GET) this);
    }
    if (this instanceof Request.PUT) {
      return PUT.apply((Request.PUT) this);
    }
    if (this instanceof Request.DELETE) {
      return DELETE.apply((Request.DELETE) this);
    }
    throw new IllegalStateException("Unexpected Request subclass encountered.");
  }

  @AutoValue
  public abstract static class GET extends Request {
    public abstract String path();

    public abstract String query();
  }

  @AutoValue
  public abstract static class PUT extends Request {
    public abstract String path();

    public abstract String body();
  }

  @AutoValue
  public abstract static class DELETE extends Request {
    public abstract String path();
  }

  public interface Matcher<Return> {
    Return GET(Request.GET GET);

    Return PUT(Request.PUT PUT);

    Return DELETE(Request.DELETE DELETE);
  }

  public static final class Matching<Return> {
    private Request value;

    private Return returnValue;

    private Matching(final Request value) {
      this.value = value;
    }

    public Request.Matching<Return> GET(final Function<Request.GET, Return> fn) {
      if (this.value instanceof Request.GET) {
        this.returnValue = fn.apply((Request.GET) this.value);
      }
      return this;
    }

    public Request.Matching<Return> PUT(final Function<Request.PUT, Return> fn) {
      if (this.value instanceof Request.PUT) {
        this.returnValue = fn.apply((Request.PUT) this.value);
      }
      return this;
    }

    public Request.Matching<Return> DELETE(final Function<Request.DELETE, Return> fn) {
      if (this.value instanceof Request.DELETE) {
        this.returnValue = fn.apply((Request.DELETE) this.value);
      }
      return this;
    }

    public boolean isMatched() {
      return this.returnValue != null;
    }

    public Return get() {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public Optional<Return> find() {
      return Optional.ofNullable(this.returnValue);
    }

    public Return orElse(final Return returnValue) {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        return returnValue;
      }
    }
  }

  public interface Accepter {
    void GET(Request.GET GET);

    void PUT(Request.PUT PUT);

    void DELETE(Request.DELETE DELETE);
  }

  public static final class Accepting {
    private boolean done;

    private Request value;

    private Accepting(final Request value) {
      this.value = value;
    }

    public Request.Accepting GET(final Consumer<Request.GET> fn) {
      if (this.value instanceof Request.GET) {
        fn.accept((Request.GET) this.value);
        this.done = true;
      }
      return this;
    }

    public Request.Accepting PUT(final Consumer<Request.PUT> fn) {
      if (this.value instanceof Request.PUT) {
        fn.accept((Request.PUT) this.value);
        this.done = true;
      }
      return this;
    }

    public Request.Accepting DELETE(final Consumer<Request.DELETE> fn) {
      if (this.value instanceof Request.DELETE) {
        fn.accept((Request.DELETE) this.value);
        this.done = true;
      }
      return this;
    }

    public boolean wasAccepted() {
      return this.done;
    }

    public void accept() {
      if (!this.done) {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public void orElse(final Consumer<Request> fn) {
      if (!this.done) {
        fn.accept(this.value);
      }
      else {
        throw new IllegalStateException("Value already matched: " + this.value);
      }
    }
  }
}


package com.test;

import com.google.auto.value.AutoValue;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class Day {
  private static final Day.Monday Monday = new AutoValue_Day_Monday();

  private static final Day.Tuesday Tuesday = new AutoValue_Day_Tuesday();

  private static final Day.Wednesday Wednesday = new AutoValue_Day_Wednesday();

  private static final Day.Thursday Thursday = new AutoValue_Day_Thursday();

  private static final Day.Friday Friday = new AutoValue_Day_Friday();

  private static final Day.Saturday Saturday = new AutoValue_Day_Saturday();

  private static final Day.Sunday Sunday = new AutoValue_Day_Sunday();

  private Day() {
  }

  public static Day.Monday monday() {
    return Monday;
  }

  public static Day.Tuesday tuesday() {
    return Tuesday;
  }

  public static Day.Wednesday wednesday() {
    return Wednesday;
  }

  public static Day.Thursday thursday() {
    return Thursday;
  }

  public static Day.Friday friday() {
    return Friday;
  }

  public static Day.Saturday saturday() {
    return Saturday;
  }

  public static Day.Sunday sunday() {
    return Sunday;
  }

  public final <Return> Return match(Day.Matcher<Return> matcher) {
    if (this instanceof Day.Monday) {
      return matcher.monday((Day.Monday) this);
    }
    if (this instanceof Day.Tuesday) {
      return matcher.tuesday((Day.Tuesday) this);
    }
    if (this instanceof Day.Wednesday) {
      return matcher.wednesday((Day.Wednesday) this);
    }
    if (this instanceof Day.Thursday) {
      return matcher.thursday((Day.Thursday) this);
    }
    if (this instanceof Day.Friday) {
      return matcher.friday((Day.Friday) this);
    }
    if (this instanceof Day.Saturday) {
      return matcher.saturday((Day.Saturday) this);
    }
    if (this instanceof Day.Sunday) {
      return matcher.sunday((Day.Sunday) this);
    }
    throw new IllegalStateException("Unexpected Day subclass encountered.");
  }

  public <Return> Day.Matching<Return> matching() {
    return new Day.Matching<Return>(this);
  }

  public final void accept(Day.Accepter accepter) {
    if (this instanceof Day.Monday) {
      accepter.monday((Day.Monday) this);
      return;
    }
    if (this instanceof Day.Tuesday) {
      accepter.tuesday((Day.Tuesday) this);
      return;
    }
    if (this instanceof Day.Wednesday) {
      accepter.wednesday((Day.Wednesday) this);
      return;
    }
    if (this instanceof Day.Thursday) {
      accepter.thursday((Day.Thursday) this);
      return;
    }
    if (this instanceof Day.Friday) {
      accepter.friday((Day.Friday) this);
      return;
    }
    if (this instanceof Day.Saturday) {
      accepter.saturday((Day.Saturday) this);
      return;
    }
    if (this instanceof Day.Sunday) {
      accepter.sunday((Day.Sunday) this);
      return;
    }
    throw new IllegalStateException("Unexpected Day subclass encountered.");
  }

  public Day.Accepting accepting() {
    return new Day.Accepting(this);
  }

  public <Return> Return matching(Function<Day.Monday, Return> monday,
      Function<Day.Tuesday, Return> tuesday, Function<Day.Wednesday, Return> wednesday,
      Function<Day.Thursday, Return> thursday, Function<Day.Friday, Return> friday,
      Function<Day.Saturday, Return> saturday, Function<Day.Sunday, Return> sunday) {
    if (this instanceof Day.Monday) {
      return monday.apply((Day.Monday) this);
    }
    if (this instanceof Day.Tuesday) {
      return tuesday.apply((Day.Tuesday) this);
    }
    if (this instanceof Day.Wednesday) {
      return wednesday.apply((Day.Wednesday) this);
    }
    if (this instanceof Day.Thursday) {
      return thursday.apply((Day.Thursday) this);
    }
    if (this instanceof Day.Friday) {
      return friday.apply((Day.Friday) this);
    }
    if (this instanceof Day.Saturday) {
      return saturday.apply((Day.Saturday) this);
    }
    if (this instanceof Day.Sunday) {
      return sunday.apply((Day.Sunday) this);
    }
    throw new IllegalStateException("Unexpected Day subclass encountered.");
  }

  @AutoValue
  public abstract static class Monday extends Day {
  }

  @AutoValue
  public abstract static class Tuesday extends Day {
  }

  @AutoValue
  public abstract static class Wednesday extends Day {
  }

  @AutoValue
  public abstract static class Thursday extends Day {
  }

  @AutoValue
  public abstract static class Friday extends Day {
  }

  @AutoValue
  public abstract static class Saturday extends Day {
  }

  @AutoValue
  public abstract static class Sunday extends Day {
  }

  public interface Matcher<Return> {
    Return monday(Day.Monday monday);

    Return tuesday(Day.Tuesday tuesday);

    Return wednesday(Day.Wednesday wednesday);

    Return thursday(Day.Thursday thursday);

    Return friday(Day.Friday friday);

    Return saturday(Day.Saturday saturday);

    Return sunday(Day.Sunday sunday);
  }

  public static final class Matching<Return> {
    private Day value;

    private Return returnValue;

    private Matching(final Day value) {
      this.value = value;
    }

    public Day.Matching<Return> Monday(final Function<Day.Monday, Return> fn) {
      if (this.value instanceof Day.Monday) {
        this.returnValue = fn.apply((Day.Monday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Tuesday(final Function<Day.Tuesday, Return> fn) {
      if (this.value instanceof Day.Tuesday) {
        this.returnValue = fn.apply((Day.Tuesday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Wednesday(final Function<Day.Wednesday, Return> fn) {
      if (this.value instanceof Day.Wednesday) {
        this.returnValue = fn.apply((Day.Wednesday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Thursday(final Function<Day.Thursday, Return> fn) {
      if (this.value instanceof Day.Thursday) {
        this.returnValue = fn.apply((Day.Thursday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Friday(final Function<Day.Friday, Return> fn) {
      if (this.value instanceof Day.Friday) {
        this.returnValue = fn.apply((Day.Friday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Saturday(final Function<Day.Saturday, Return> fn) {
      if (this.value instanceof Day.Saturday) {
        this.returnValue = fn.apply((Day.Saturday) this.value);
      }
      return this;
    }

    public Day.Matching<Return> Sunday(final Function<Day.Sunday, Return> fn) {
      if (this.value instanceof Day.Sunday) {
        this.returnValue = fn.apply((Day.Sunday) this.value);
      }
      return this;
    }

    public boolean isMatched() {
      return this.returnValue != null;
    }

    public Return get() {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public Optional<Return> find() {
      return Optional.ofNullable(this.returnValue);
    }

    public Return orElse(final Return returnValue) {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        return returnValue;
      }
    }
  }

  public interface Accepter {
    void monday(Day.Monday monday);

    void tuesday(Day.Tuesday tuesday);

    void wednesday(Day.Wednesday wednesday);

    void thursday(Day.Thursday thursday);

    void friday(Day.Friday friday);

    void saturday(Day.Saturday saturday);

    void sunday(Day.Sunday sunday);
  }

  public static final class Accepting {
    private boolean done;

    private Day value;

    private Accepting(final Day value) {
      this.value = value;
    }

    public Day.Accepting Monday(final Consumer<Day.Monday> fn) {
      if (this.value instanceof Day.Monday) {
        fn.accept((Day.Monday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Tuesday(final Consumer<Day.Tuesday> fn) {
      if (this.value instanceof Day.Tuesday) {
        fn.accept((Day.Tuesday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Wednesday(final Consumer<Day.Wednesday> fn) {
      if (this.value instanceof Day.Wednesday) {
        fn.accept((Day.Wednesday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Thursday(final Consumer<Day.Thursday> fn) {
      if (this.value instanceof Day.Thursday) {
        fn.accept((Day.Thursday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Friday(final Consumer<Day.Friday> fn) {
      if (this.value instanceof Day.Friday) {
        fn.accept((Day.Friday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Saturday(final Consumer<Day.Saturday> fn) {
      if (this.value instanceof Day.Saturday) {
        fn.accept((Day.Saturday) this.value);
        this.done = true;
      }
      return this;
    }

    public Day.Accepting Sunday(final Consumer<Day.Sunday> fn) {
      if (this.value instanceof Day.Sunday) {
        fn.accept((Day.Sunday) this.value);
        this.done = true;
      }
      return this;
    }

    public boolean wasAccepted() {
      return this.done;
    }

    public void accept() {
      if (!this.done) {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public void orElse(final Consumer<Day> fn) {
      if (!this.done) {
        fn.accept(this.value);
      }
      else {
        throw new IllegalStateException("Value already matched: " + this.value);
      }
    }
  }
}


package com.test;

import com.google.auto.value.AutoValue;
import java.util.Optional;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class GenericAttribute {
  private static final GenericAttribute.Empty Empty = new AutoValue_GenericAttribute_Empty();

  private GenericAttribute() {
  }

  public static GenericAttribute.Empty empty() {
    return Empty;
  }

  public static GenericAttribute.Container container(Set<String> value) {
    return new AutoValue_GenericAttribute_Container(value);
  }

  public final <Return> Return match(GenericAttribute.Matcher<Return> matcher) {
    if (this instanceof GenericAttribute.Empty) {
      return matcher.empty((GenericAttribute.Empty) this);
    }
    if (this instanceof GenericAttribute.Container) {
      return matcher.container((GenericAttribute.Container) this);
    }
    throw new IllegalStateException("Unexpected GenericAttribute subclass encountered.");
  }

  public <Return> GenericAttribute.Matching<Return> matching() {
    return new GenericAttribute.Matching<Return>(this);
  }

  public final void accept(GenericAttribute.Accepter accepter) {
    if (this instanceof GenericAttribute.Empty) {
      accepter.empty((GenericAttribute.Empty) this);
      return;
    }
    if (this instanceof GenericAttribute.Container) {
      accepter.container((GenericAttribute.Container) this);
      return;
    }
    throw new IllegalStateException("Unexpected GenericAttribute subclass encountered.");
  }

  public GenericAttribute.Accepting accepting() {
    return new GenericAttribute.Accepting(this);
  }

  public <Return> Return matching(Function<GenericAttribute.Empty, Return> empty,
      Function<GenericAttribute.Container, Return> container) {
    if (this instanceof GenericAttribute.Empty) {
      return empty.apply((GenericAttribute.Empty) this);
    }
    if (this instanceof GenericAttribute.Container) {
      return container.apply((GenericAttribute.Container) this);
    }
    throw new IllegalStateException("Unexpected GenericAttribute subclass encountered.");
  }

  @AutoValue
  public abstract static class Empty extends GenericAttribute {
  }

  @AutoValue
  public abstract static class Container extends GenericAttribute {
    public abstract Set<String> value();
  }

  public interface Matcher<Return> {
    Return empty(GenericAttribute.Empty empty);

    Return container(GenericAttribute.Container container);
  }

  public static final class Matching<Return> {
    private GenericAttribute value;

    private Return returnValue;

    private Matching(final GenericAttribute value) {
      this.value = value;
    }

    public GenericAttribute.Matching<Return> Empty(
        final Function<GenericAttribute.Empty, Return> fn) {
      if (this.value instanceof GenericAttribute.Empty) {
        this.returnValue = fn.apply((GenericAttribute.Empty) this.value);
      }
      return this;
    }

    public GenericAttribute.Matching<Return> Container(
        final Function<GenericAttribute.Container, Return> fn) {
      if (this.value instanceof GenericAttribute.Container) {
        this.returnValue = fn.apply((GenericAttribute.Container) this.value);
      }
      return this;
    }

    public boolean isMatched() {
      return this.returnValue != null;
    }

    public Return get() {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public Optional<Return> find() {
      return Optional.ofNullable(this.returnValue);
    }

    public Return orElse(final Return returnValue) {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        return returnValue;
      }
    }
  }

  public interface Accepter {
    void empty(GenericAttribute.Empty empty);

    void container(GenericAttribute.Container container);
  }

  public static final class Accepting {
    private boolean done;

    private GenericAttribute value;

    private Accepting(final GenericAttribute value) {
      this.value = value;
    }

    public GenericAttribute.Accepting Empty(final Consumer<GenericAttribute.Empty> fn) {
      if (this.value instanceof GenericAttribute.Empty) {
        fn.accept((GenericAttribute.Empty) this.value);
        this.done = true;
      }
      return this;
    }

    public GenericAttribute.Accepting Container(final Consumer<GenericAttribute.Container> fn) {
      if (this.value instanceof GenericAttribute.Container) {
        fn.accept((GenericAttribute.Container) this.value);
        this.done = true;
      }
      return this;
    }

    public boolean wasAccepted() {
      return this.done;
    }

    public void accept() {
      if (!this.done) {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public void orElse(final Consumer<GenericAttribute> fn) {
      if (!this.done) {
        fn.accept(this.value);
      }
      else {
        throw new IllegalStateException("Value already matched: " + this.value);
      }
    }
  }
}


package com.test;

import com.google.auto.value.AutoValue;
import java.util.Optional;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class GenericType<T> {
  private static final GenericType.Empty Empty = new AutoValue_GenericType_Empty();

  private GenericType() {
  }

  public static <T> GenericType.Empty<T> empty() {
    return Empty;
  }

  public static <T> GenericType.Single<T> single(T value) {
    return new AutoValue_GenericType_Single(value);
  }

  public static <T> GenericType.Container<T> container(Set<T> value) {
    return new AutoValue_GenericType_Container(value);
  }

  public final <Return> Return match(GenericType.Matcher<T, Return> matcher) {
    if (this instanceof GenericType.Empty) {
      return matcher.empty((GenericType.Empty<T>) this);
    }
    if (this instanceof GenericType.Single) {
      return matcher.single((GenericType.Single<T>) this);
    }
    if (this instanceof GenericType.Container) {
      return matcher.container((GenericType.Container<T>) this);
    }
    throw new IllegalStateException("Unexpected GenericType subclass encountered.");
  }

  public <Return> GenericType.Matching<T, Return> matching() {
    return new GenericType.Matching<T, Return>(this);
  }

  public final void accept(GenericType.Accepter accepter) {
    if (this instanceof GenericType.Empty) {
      accepter.empty((GenericType.Empty<T>) this);
      return;
    }
    if (this instanceof GenericType.Single) {
      accepter.single((GenericType.Single<T>) this);
      return;
    }
    if (this instanceof GenericType.Container) {
      accepter.container((GenericType.Container<T>) this);
      return;
    }
    throw new IllegalStateException("Unexpected GenericType subclass encountered.");
  }

  public GenericType.Accepting accepting() {
    return new GenericType.Accepting(this);
  }

  public <Return> Return matching(Function<GenericType.Empty<T>, Return> empty,
      Function<GenericType.Single<T>, Return> single,
      Function<GenericType.Container<T>, Return> container) {
    if (this instanceof GenericType.Empty) {
      return empty.apply((GenericType.Empty<T>) this);
    }
    if (this instanceof GenericType.Single) {
      return single.apply((GenericType.Single<T>) this);
    }
    if (this instanceof GenericType.Container) {
      return container.apply((GenericType.Container<T>) this);
    }
    throw new IllegalStateException("Unexpected GenericType subclass encountered.");
  }

  @AutoValue
  public abstract static class Empty<T> extends GenericType<T> {
  }

  @AutoValue
  public abstract static class Single<T> extends GenericType<T> {
    public abstract T value();
  }

  @AutoValue
  public abstract static class Container<T> extends GenericType<T> {
    public abstract Set<T> value();
  }

  public interface Matcher<T, Return> {
    Return empty(GenericType.Empty<T> empty);

    Return single(GenericType.Single<T> single);

    Return container(GenericType.Container<T> container);
  }

  public static final class Matching<T, Return> {
    private GenericType value;

    private Return returnValue;

    private Matching(final GenericType value) {
      this.value = value;
    }

    public GenericType.Matching<T, Return> Empty(final Function<GenericType.Empty<T>, Return> fn) {
      if (this.value instanceof GenericType.Empty) {
        this.returnValue = fn.apply((GenericType.Empty<T>) this.value);
      }
      return this;
    }

    public GenericType.Matching<T, Return> Single(
        final Function<GenericType.Single<T>, Return> fn) {
      if (this.value instanceof GenericType.Single) {
        this.returnValue = fn.apply((GenericType.Single<T>) this.value);
      }
      return this;
    }

    public GenericType.Matching<T, Return> Container(
        final Function<GenericType.Container<T>, Return> fn) {
      if (this.value instanceof GenericType.Container) {
        this.returnValue = fn.apply((GenericType.Container<T>) this.value);
      }
      return this;
    }

    public boolean isMatched() {
      return this.returnValue != null;
    }

    public Return get() {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public Optional<Return> find() {
      return Optional.ofNullable(this.returnValue);
    }

    public Return orElse(final Return returnValue) {
      if (this.returnValue != null) {
        return this.returnValue;
      }
      else {
        return returnValue;
      }
    }
  }

  public interface Accepter<T> {
    void empty(GenericType.Empty<T> empty);

    void single(GenericType.Single<T> single);

    void container(GenericType.Container<T> container);
  }

  public static final class Accepting<T> {
    private boolean done;

    private GenericType value;

    private Accepting(final GenericType value) {
      this.value = value;
    }

    public GenericType.Accepting Empty(final Consumer<GenericType.Empty<T>> fn) {
      if (this.value instanceof GenericType.Empty) {
        fn.accept((GenericType.Empty<T>) this.value);
        this.done = true;
      }
      return this;
    }

    public GenericType.Accepting Single(final Consumer<GenericType.Single<T>> fn) {
      if (this.value instanceof GenericType.Single) {
        fn.accept((GenericType.Single<T>) this.value);
        this.done = true;
      }
      return this;
    }

    public GenericType.Accepting Container(final Consumer<GenericType.Container<T>> fn) {
      if (this.value instanceof GenericType.Container) {
        fn.accept((GenericType.Container<T>) this.value);
        this.done = true;
      }
      return this;
    }

    public boolean wasAccepted() {
      return this.done;
    }

    public void accept() {
      if (!this.done) {
        throw new IllegalStateException("Unmatched value: " + this.value);
      }
    }

    public void orElse(final Consumer<GenericType> fn) {
      if (!this.done) {
        fn.accept(this.value);
      }
      else {
        throw new IllegalStateException("Value already matched: " + this.value);
      }
    }
  }
}


